package jp.co.kentaku.kikan.domain.service.a.aj.aje020;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.dozer.Mapper;

import jp.co.kentaku.kikan.common.model.BaseDto;
import jp.co.kentaku.kikan.common.util.NumberUtil;
import jp.co.kentaku.kikan.common.util.StringUtil;
import jp.co.kentaku.kikan.domain.common.constants.a.aj.aje020.Aje020Constants;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aja1mpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aja1mpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aja2mpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aja2mpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajb1mpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajb1mpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajd1mpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajd1mpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aje1fpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Aje1fpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajl1fpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajl1fpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajm1fpDto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.Ajm1fpExample;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAja1mp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAja1mp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAja2mp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAja2mp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjb1mp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjb1mp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjd1mp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjd1mp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAje1fp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAje1fp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjl1fp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjl1fp01Example;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjm1fp01Dto;
import jp.co.kentaku.kikan.domain.entity.model.a.aj.WrkAjm1fp01Example;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Aja1mpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Aja2mpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Ajb1mpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Ajd1mpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Aje1fpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Ajl1fpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.Ajm1fpSharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAja1mp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAja2mp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAjb1mp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAjd1mp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAje1fp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAjl1fp01SharedService;
import jp.co.kentaku.kikan.domain.entity.service.a.aj.WrkAjm1fp01SharedService;
import jp.co.kentaku.kikan.domain.model.common.CommonServiceDto;

public class DataCompare<T extends CommonServiceDto, D extends BaseDto> {

    private String wrkKey;

    // private String filePath = "C:\\dk\\compareLog.txt";

    private String filePath = "C:\\dk\\compareData_";

    private String logPath = "C:\\dk\\compareLog_";

    private T commonServiceDto;

    /** bean転記用のMapper */
    @Inject
    private Mapper beanMapper;

    /** 歩合給月次マスタエンティティシェアードサービス */
    @Inject
    private Aja1mpSharedService aja1mpSharedService;

    /** 歩合給月次マスタエンティティシェアードサービス */
    @Inject
    private WrkAja1mp01SharedService wrkAja1mp01SharedService;

    /** 歩合給月次マスタエンティティシェアードサービス */
    @Inject
    private Aja2mpSharedService aja2mpSharedService;

    /** 歩合給月次マスタエンティティシェアードサービス */
    @Inject
    private WrkAja2mp01SharedService wrkAja2mp01SharedService;

    /**
     * <pre>
     * 歩合給変動のServiceクラス
     * </pre>
     */
    @Inject
    private Ajb1mpSharedService ajb1mpSharedService;

    /**
     * <pre>
     * 歩合給変動のServiceクラス
     * </pre>
     */
    @Inject
    private WrkAjb1mp01SharedService wrkAjb1mp01SharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private Aje1fpSharedService aje1fpSharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private WrkAje1fp01SharedService wrkAje1fp01SharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private Ajm1fpSharedService ajm1fpSharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private WrkAjm1fp01SharedService wrkAjm1fp01SharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private Ajl1fpSharedService ajl1fpSharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private WrkAjl1fp01SharedService wrkAjl1fp01SharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private Ajd1mpSharedService ajd1mpSharedService;

    /**
     * <pre>
     * 歩合給マスタのServiceクラス
     * </pre>
     */
    @Inject
    private WrkAjd1mp01SharedService wrkAjd1mp01SharedService;

    public DataCompare(T commonServiceDto, Mapper beanMapper, String wrkKey, Aja1mpSharedService aja1mpSharedService,
            WrkAja1mp01SharedService wrkAja1mp01SharedService, Aja2mpSharedService aja2mpSharedService,
            WrkAja2mp01SharedService wrkAja2mp01SharedService, Ajb1mpSharedService ajb1mpSharedService,
            WrkAjb1mp01SharedService wrkAjb1mp01SharedService, Aje1fpSharedService aje1fpSharedService,
            WrkAje1fp01SharedService wrkAje1fp01SharedService, Ajm1fpSharedService ajm1fpSharedService,
            WrkAjm1fp01SharedService wrkAjm1fp01SharedService, Ajl1fpSharedService ajl1fpSharedService,
            WrkAjl1fp01SharedService wrkAjl1fp01SharedService, Ajd1mpSharedService ajd1mpSharedService,
            WrkAjd1mp01SharedService wrkAjd1mp01SharedService) {
        this.commonServiceDto = commonServiceDto;
        this.wrkKey = StringUtil.getEmptyIfNull(wrkKey);
        this.beanMapper = beanMapper;
        this.aja1mpSharedService = aja1mpSharedService;
        this.wrkAja1mp01SharedService = wrkAja1mp01SharedService;
        this.aja2mpSharedService = aja2mpSharedService;
        this.wrkAja2mp01SharedService = wrkAja2mp01SharedService;
        this.ajb1mpSharedService = ajb1mpSharedService;
        this.wrkAjb1mp01SharedService = wrkAjb1mp01SharedService;
        this.aje1fpSharedService = aje1fpSharedService;
        this.wrkAje1fp01SharedService = wrkAje1fp01SharedService;
        this.ajm1fpSharedService = ajm1fpSharedService;
        this.wrkAjm1fp01SharedService = wrkAjm1fp01SharedService;
        this.ajl1fpSharedService = ajl1fpSharedService;
        this.wrkAjl1fp01SharedService = wrkAjl1fp01SharedService;
        this.ajd1mpSharedService = ajd1mpSharedService;
        this.wrkAjd1mp01SharedService = wrkAjd1mp01SharedService;
    }

    public DataCompare(T commonServiceDto, Mapper beanMapper, String wrkKey) {
        this.commonServiceDto = commonServiceDto;
        this.wrkKey = StringUtil.getEmptyIfNull(wrkKey);
        this.beanMapper = beanMapper;

    }

    public DataCompare() {
        this.commonServiceDto = null;
        this.wrkKey = StringUtil.EMPTY;
    }

    public void setAttribute(T commonServiceDto, Mapper beanMapper, String wrkKey) {
        this.commonServiceDto = commonServiceDto;
        this.wrkKey = StringUtil.getEmptyIfNull(wrkKey);
        this.beanMapper = beanMapper;
    }

    ////////////////////////////////////////////// ALL TABLE/////////////////////////////////////////////////////////////////////
    public boolean compare7Table(String kyCd) {
        StackTraceElement stack[] = Thread.currentThread().getStackTrace(); // 获取线程运行栈信息
        // for(int i=0;i<stack.length;i++) {
        StackTraceElement s = stack[1];
        System.out.format("ClassName:%s", s.getClassName());
        System.out.format("MethodName:%s", s.getMethodName());
        System.out.format("FileName:%s", s.getFileName());
        System.out.format("LineNumber:%s", s.getLineNumber());
        // }
        return this.compare7Table(this.commonServiceDto, this.wrkKey, kyCd, StringUtil.EMPTY);
    }

    public boolean compare7Table(String kyCd, String addCd) {
        return this.compare7Table(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    public boolean compare7Table(T dto, String wrkKey, String kyCd, String addCd) {
        boolean flag1 = true;
        boolean flag2 = true;
        boolean flag3 = true;
        boolean flag4 = true;
        boolean flag5 = true;
        boolean flag6 = true;
        boolean flag7 = true;
        if (!this.compareAja1mp(kyCd, addCd)) {
            flag1 = false;
        }
        if (!this.compareAja2mp(kyCd, addCd)) {
            flag2 = false;
        }
        if (!this.compareAjb1mp(kyCd, addCd)) {
            flag3 = false;
        }
        if (!this.compareAje1fp(kyCd, addCd)) {
            flag4 = false;
        }
        if (!this.compareAjl1fp(kyCd, addCd)) {
            flag5 = false;
        }
        if (!this.compareAjm1fp(kyCd, addCd)) {
            flag6 = false;
        }
        if (!this.compareAjd1mp(kyCd, addCd)) {
            flag7 = false;
        }

        if (flag1 && flag2 && flag3 && flag4 && flag5 && flag6 && flag7) {
            return true;
        }
        return false;
    }

    ////////////////////////////////////////////// AJA2MP/////////////////////////////////////////////////////////////////////

    public boolean compareAja2mp(String kyCd) {
        return this.compareAja2mp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAja2mp(String kyCd, String addCd) {
        return this.compareAja2mp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAja2mp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }
        List<Aja2mpDto> dtoList = this.selectAja2mpList(dto, kyCd, addCd);
        List<Aja2mpDto> wrkDtoList = this.selectWkAja2mp01List(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJA2MP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJA2MP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJA2MP==>>>===Aja2mp size :" + dtoList.size());
            System.err.println("======AJA2MP==>>>===WrkAja2mp01 size :" + wrkDtoList.size());
            this.writeAja2mp(this.getName("AJA2MP", "SizeError"), true, dtoList);
            this.writeAja2mp(this.getName("WRK_AJA2MP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAja2mp(this.getName("AJA2MP"), true, dtoList);
                this.writeAja2mp(this.getName("WRK_AJA2MP"), true, wrkDtoList);
                System.err.println("======AJA2MP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJA2MP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJA2MP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJB1MP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJB1MP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJA1MP/////////////////////////////////////////////////////////////////////

    public boolean compareAja1mp(String kyCd) {
        return this.compareAja1mp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAja1mp(String kyCd, String addCd) {
        return this.compareAja1mp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAja1mp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }

        List<Aja1mpDto> dtoList = this.selectAja1mpList(dto, kyCd, addCd);
        List<Aja1mpDto> wrkDtoList = this.selectWrkAja1mp01List(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJA1MP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJA1MP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJA1MP==>>>===Aja1mp size :" + dtoList.size());
            System.err.println("======AJA1MP==>>>===WrkAja1mp01 size :" + wrkDtoList.size());
            this.writeAja1mp(this.getName("AJA1MP", "SizeError"), true, dtoList);
            this.writeAja1mp(this.getName("WRK_AJA1MP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAja1mp(this.getName("AJA1MP"), true, dtoList);
                this.writeAja1mp(this.getName("WRK_AJA1MP"), true, wrkDtoList);
                System.err.println("======AJA1MP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJA1MP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJA1MP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJB1MP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJB1MP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJB1MP/////////////////////////////////////////////////////////////////////

    public boolean compareAjb1mp(String kyCd) {
        return this.compareAjb1mp(this.commonServiceDto, this.wrkKey, kyCd, null, NumberUtils.SHORT_ZERO, 0);
    }

    public boolean compareAjb1mp(String kyCd, String addCd) {
        return this.compareAjb1mp(this.commonServiceDto, this.wrkKey, kyCd, addCd, NumberUtils.SHORT_ZERO, 0);
    }

    public boolean compareAjb1mp(String kyCd, String addCd, Short bukTsChky, int shYm) {
        return this.compareAjb1mp(this.commonServiceDto, this.wrkKey, kyCd, addCd, bukTsChky, shYm);
    }

    private boolean compareAjb1mp(T dto, String wrkKey, String kyCd, String addCd, Short bukTsChky, int shYm) {

        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }

        List<Ajb1mpDto> dtoList = this.selectAjb1mp(dto, kyCd, addCd, bukTsChky, shYm);
        List<Ajb1mpDto> wrkDtoList = this.selectWrkAjb1mp01(dto, wrkKey, kyCd, addCd, bukTsChky, shYm);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJB1MP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJB1MP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJB1MP==>>>===Ajb1mp size :" + dtoList.size());
            System.err.println("======AJB1MP==>>>===WrkAjb1mp01 size :" + wrkDtoList.size());
            this.writeAjb1mp(this.getName("AJB1MP", "SizeError"), true, dtoList);
            this.writeAjb1mp(this.getName("WRK_AJB1MP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAjb1mp(this.getName("AJB1MP"), true, dtoList);
                this.writeAjb1mp(this.getName("WRK_AJB1MP"), true, wrkDtoList);
                System.err.println("======AJB1MP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJB1MP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJB1MP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJB1MP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJB1MP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJE1FP/////////////////////////////////////////////////////////////////////

    public boolean compareAje1fp(String kyCd) {
        return this.compareAje1fp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAje1fp(String kyCd, String addCd) {
        return this.compareAje1fp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAje1fp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }
        List<Aje1fpDto> dtoList = this.selectAje1fp(dto, kyCd, addCd);
        List<Aje1fpDto> wrkDtoList = this.selectWrkAje1fp01(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJE1FP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJE1FP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJE1FP==>>>===Aje1fp size :" + dtoList.size());
            System.err.println("======AJE1FP==>>>===WrkAje1fp01 size :" + wrkDtoList.size());
            this.writeAje1fp(this.getName("AJE1FP", "SizeError"), true, dtoList);
            this.writeAje1fp(this.getName("WRK_AJE1FP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAje1fp(this.getName("AJE1FP"), true, dtoList);
                this.writeAje1fp(this.getName("WRK_AJE1FP"), true, wrkDtoList);
                System.err.println("======AJE1FP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJE1FP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJE1FP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJE1FP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJE1FP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJM1FP/////////////////////////////////////////////////////////////////////

    public boolean compareAjm1fp(String kyCd) {
        return this.compareAjm1fp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAjm1fp(String kyCd, String addCd) {
        return this.compareAjm1fp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAjm1fp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }
        List<Ajm1fpDto> dtoList = this.selectAjm1fp(dto, kyCd, addCd);
        List<Ajm1fpDto> wrkDtoList = this.selectWrkAjm1fp01(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJM1FP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJM1FP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJM1FP==>>>===Ajm1fp size :" + dtoList.size());
            System.err.println("======AJM1FP==>>>===WrkAjm1fp01 size :" + wrkDtoList.size());
            this.writeAjm1fp(this.getName("AJM1FP", "SizeError"), true, dtoList);
            this.writeAjm1fp(this.getName("WRK_AJM1FP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAjm1fp(this.getName("AJM1FP"), true, dtoList);
                this.writeAjm1fp(this.getName("WRK_AJM1FP"), true, wrkDtoList);
                System.err.println("======AJM1FP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJM1FP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJM1FP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJM1FP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJM1FP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJL1FP/////////////////////////////////////////////////////////////////////

    public boolean compareAjl1fp(String kyCd) {
        return this.compareAjl1fp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAjl1fp(String kyCd, String addCd) {
        return this.compareAjl1fp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAjl1fp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }
        List<Ajl1fpDto> dtoList = this.selectAjl1fp(dto, kyCd, addCd);
        List<Ajl1fpDto> wrkDtoList = this.selectWrkAjl1fp01(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJL1FP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJL1FP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJL1FP==>>>===Ajl1fp size :" + dtoList.size());
            System.err.println("======AJL1FP==>>>===WrkAjl1fp01 size :" + wrkDtoList.size());
            this.writeAjl1fp(this.getName("AJL1FP", "SizeError"), true, dtoList);
            this.writeAjl1fp(this.getName("WRK_AJL1FP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAjl1fp(this.getName("AJL1FP"), true, dtoList);
                this.writeAjl1fp(this.getName("WRK_AJL1FP"), true, wrkDtoList);
                System.err.println("======AJL1FP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJL1FP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJL1FP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJL1FP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJL1FP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////////////////////////// AJD1MP/////////////////////////////////////////////////////////////////////

    public boolean compareAjd1mp(String kyCd) {
        return this.compareAjd1mp(this.commonServiceDto, this.wrkKey, kyCd, null);
    }

    public boolean compareAjd1mp(String kyCd, String addCd) {
        return this.compareAjd1mp(this.commonServiceDto, this.wrkKey, kyCd, addCd);
    }

    private boolean compareAjd1mp(T dto, String wrkKey, String kyCd, String addCd) {
        if (!Aje020Constants.IS_DEBUG || !Aje020Constants.IS_WORK) {
            return true;
        }
        List<Ajd1mpDto> dtoList = this.selectAjd1mp(dto, kyCd, addCd);
        List<Ajd1mpDto> wrkDtoList = this.selectWrkAjd1mp01(dto, wrkKey, kyCd, addCd);
        if (dtoList.isEmpty() && wrkDtoList.isEmpty()) {
            System.err.println("======AJD1MP==>>>===No data has been select !!!==========");
            return true;
        }

        if (!NumberUtil.equals(dtoList.size(), wrkDtoList.size())) {
            System.err.println("======AJD1MP==>>>===The size of the arrays is different !!!=====ERROR=====");
            System.err.println("======AJD1MP==>>>===Ajd1mp size :" + dtoList.size());
            System.err.println("======AJD1MP==>>>===WrkAjd1mp01 size :" + wrkDtoList.size());
            this.writeAjd1mp(this.getName("AJD1MP", "SizeError"), true, dtoList);
            this.writeAjd1mp(this.getName("WRK_AJD1MP", "SizeError"), true, wrkDtoList);
            return false;
        }
        StringBuffer bf = new StringBuffer();
        for (int i = 0; i < dtoList.size(); i++) {
            // 作成年月日
            dtoList.get(i).setCrtYmd(null);
            // 作成時刻
            dtoList.get(i).setCrtTm(null);
            // 更新年月日
            dtoList.get(i).setUpyMd(null);
            // 更新時刻
            dtoList.get(i).setUpdTm(null);
            // 更新プログラム
            dtoList.get(i).setUpdPrg(null);
            // 更新者
            dtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            dtoList.get(i).setUpdWS(null);
            String hasdDto = dtoList.get(i).getHashKey();

            // 作成年月日
            wrkDtoList.get(i).setCrtYmd(null);
            // 作成時刻
            wrkDtoList.get(i).setCrtTm(null);
            // 更新年月日
            wrkDtoList.get(i).setUpyMd(null);
            // 更新時刻
            wrkDtoList.get(i).setUpdTm(null);
            // 更新プログラム
            wrkDtoList.get(i).setUpdPrg(null);
            // 更新者
            wrkDtoList.get(i).setUpm(null);
            // 更新Ｗ／Ｓ
            wrkDtoList.get(i).setUpdWS(null);
            String hasdWrkDto = wrkDtoList.get(i).getHashKey();

            bf.append(dtoList.get(i).toString() + "\r\n");
            bf.append(wrkDtoList.get(i).toString() + "\r\n");

            if (!StringUtil.equals(hasdDto, hasdWrkDto)) {
                // this.writeText(this.filePath, true, bf.toString());
                this.writeAjd1mp(this.getName("AJD1MP"), true, dtoList);
                this.writeAjd1mp(this.getName("WRK_AJD1MP"), true, wrkDtoList);
                System.err.println("======AJD1MP==>>>===HashCodes are not equal  !!!=====ERROR=====");
                System.err.println("======AJD1MP==>>>===The sorting (from 0) : " + i);
                System.err.println("======AJD1MP==>>>===Total size : " + dtoList.size());
                return false;
            }
        }
        System.err.println("======AJD1MP==>>>===Compare SUCCESS !!!==========");
        System.err.println("======AJD1MP==>>>===Total number : " + dtoList.size());
        return true;
    }

    ////////////////////////// SQL/////////////////////////////////////////////////////////////////////////////////////////

    private List<Aja2mpDto> selectAja2mpList(T dto, String kyCd, String addCd) {
        // 検索条件設定の準備
        Aja2mpExample aja2mpExample = new Aja2mpExample();
        Aja2mpExample.Criteria criteria = aja2mpExample.createCriteria();

        // 歩合給月次マスタ．契約コード
        criteria.andKyCdEqualTo(StringUtil.getEmptyIfNull(kyCd));
        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給月次マスタ．追加コード
            criteria.andAddCdEqualTo(StringUtil.getEmptyIfNull(addCd));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 歩合給月次マスタ．契約コード 昇順
        sortKey.append(Aja2mpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 歩合給月次マスタ．追加コード 昇順
        sortKey.append(Aja2mpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC ");

        aja2mpExample.setOrderByClause(sortKey.toString());

        // 歩合給月次マスタ検索
        return this.aja2mpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(),
                aja2mpExample);
    }

    private List<Aja2mpDto> selectWkAja2mp01List(T dto, String wrkKey, String kyCd, String addCd) {
        // 発生事由テーブルに対しての検索条件設定の準備
        WrkAja2mp01Example wrkAja2mp01Example = new WrkAja2mp01Example();
        WrkAja2mp01Example.Criteria criteria = wrkAja2mp01Example.createCriteria();
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        // 歩合給月次マスタ．契約コード
        criteria.andKyCdEqualTo(StringUtil.getEmptyIfNull(kyCd));
        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給月次マスタ．追加コード
            criteria.andAddCdEqualTo(StringUtil.getEmptyIfNull(addCd));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 契約コード
        sortKey.append(WrkAja2mp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 契約追加コード
        sortKey.append(WrkAja2mp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC ");

        wrkAja2mp01Example.setOrderByClause(sortKey.toString());

        // カレンダーマスタ
        List<WrkAja2mp01Dto> wrkAja2mp01DtoList = this.wrkAja2mp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAja2mp01Example);
        if (wrkAja2mp01DtoList.isEmpty()) {
            return new ArrayList<Aja2mpDto>();
        }
        List<Aja2mpDto> aja2mpDtoList = new ArrayList<Aja2mpDto>();
        for (int i = 0; i < wrkAja2mp01DtoList.size(); i++) {
            Aja2mpDto aja2mpDto = new Aja2mpDto();
            this.beanMapper.map(wrkAja2mp01DtoList.get(i), aja2mpDto);
            aja2mpDtoList.add(aja2mpDto);
        }

        return aja2mpDtoList;
    }

    private List<Aja1mpDto> selectAja1mpList(T dto, String kyCd, String addCd) {
        // 発生事由テーブルに対しての検索条件設定の準備
        Aja1mpExample aja1mpExample = new Aja1mpExample();
        Aja1mpExample.Criteria criteria = aja1mpExample.createCriteria();
        // 歩合給月次マスタ．契約コード = Aja770ServiceDto．契約コード
        criteria.andKyCdEqualTo(StringUtil.getEmptyIfNull(kyCd));
        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給月次マスタ．追加コード
            criteria.andAddCdEqualTo(StringUtil.getEmptyIfNull(addCd));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 契約コード
        sortKey.append(Aja1mpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 契約追加コード
        sortKey.append(Aja1mpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC ");

        aja1mpExample.setOrderByClause(sortKey.toString());

        // カレンダーマスタ
        List<Aja1mpDto> aja1mpDtoList = this.aja1mpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), aja1mpExample);
        return aja1mpDtoList;
    }

    private List<Aja1mpDto> selectWrkAja1mp01List(T dto, String wrkKey, String kyCd, String addCd) {
        // 発生事由テーブルに対しての検索条件設定の準備
        WrkAja1mp01Example wrkAja1mp01Example = new WrkAja1mp01Example();
        WrkAja1mp01Example.Criteria criteria = wrkAja1mp01Example.createCriteria();
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        // 歩合給月次マスタ．契約コード = Aja770ServiceDto．契約コード
        criteria.andKyCdEqualTo(StringUtil.getEmptyIfNull(kyCd));
        // 歩合給月次マスタ．追加コード = Aja770ServiceDto．追加コード
        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給月次マスタ．追加コード
            criteria.andAddCdEqualTo(StringUtil.getEmptyIfNull(addCd));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 契約コード
        sortKey.append(WrkAja1mp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 契約追加コード
        sortKey.append(WrkAja1mp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC ");

        wrkAja1mp01Example.setOrderByClause(sortKey.toString());

        // カレンダーマスタ
        List<WrkAja1mp01Dto> wrkAja1mp01DtoList = this.wrkAja1mp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAja1mp01Example);
        if (wrkAja1mp01DtoList.isEmpty()) {
            return new ArrayList<Aja1mpDto>();
        }
        List<Aja1mpDto> aja1mpDtolist = new ArrayList<Aja1mpDto>();
        for (int i = 0; i < wrkAja1mp01DtoList.size(); i++) {
            Aja1mpDto aja1mpDto = new Aja1mpDto();
            this.beanMapper.map(wrkAja1mp01DtoList.get(i), aja1mpDto);
            aja1mpDtolist.add(aja1mpDto);
        }
        return aja1mpDtolist;
    }

    private List<Ajb1mpDto> selectAjb1mp(T dto, String kyCd, String addCd, short bukTsChky, int shYm) {
        Ajb1mpExample ajb1mpExample = new Ajb1mpExample();
        Ajb1mpExample.Criteria criteria = ajb1mpExample.createCriteria();
        // 【検索条件】
        // 歩合給変動．契約コード
        criteria.andKyCdEqualTo(kyCd);
        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給変動．追加コード
            criteria.andAddCdEqualTo(addCd);
        }
        if (!NumberUtil.isNullOrZero(bukTsChky)) {
            // 歩合給変動．歩合給対象変更契約
            criteria.andBukTsChkyEqualTo(NumberUtil.getZeroIfNull(bukTsChky));
        }
        if (!NumberUtil.isNullOrZero(shYm)) {
            criteria.andShYmEqualTo(NumberUtil.getZeroIfNull(shYm));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 歩合給変動．契約コード
        sortKey.append(Ajb1mpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 歩合給変動．追加コード
        sortKey.append(Ajb1mpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給変動．歩合給対象変更契約
        sortKey.append(Ajb1mpDto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 歩合給変動．処理年月
        sortKey.append(Ajb1mpDto.COLUMN_SH_YM);
        sortKey.append(" ASC ");

        ajb1mpExample.setOrderByClause(sortKey.toString());

        return this.ajb1mpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), ajb1mpExample);
    }

    private List<Ajb1mpDto> selectWrkAjb1mp01(T dto, String wrkKey, String kyCd, String addCd, short bukTsChky, int shYm) {

        WrkAjb1mp01Example wrkAjb1mp01Example = new WrkAjb1mp01Example();
        WrkAjb1mp01Example.Criteria criteria = wrkAjb1mp01Example.createCriteria();
        // 【検索条件】
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        // 歩合給変動．契約コード
        criteria.andKyCdEqualTo(kyCd);

        if (StringUtils.isNotBlank(addCd)) {
            // 歩合給変動．追加コード
            criteria.andAddCdEqualTo(addCd);
        }
        if (!NumberUtil.isNullOrZero(bukTsChky)) {
            // 歩合給変動．歩合給対象変更契約
            criteria.andBukTsChkyEqualTo(NumberUtil.getZeroIfNull(bukTsChky));
        }
        if (!NumberUtil.isNullOrZero(shYm)) {
            criteria.andShYmEqualTo(NumberUtil.getZeroIfNull(shYm));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 歩合給変動．契約コード
        sortKey.append(WrkAjb1mp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 歩合給変動．追加コード
        sortKey.append(WrkAjb1mp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給変動．歩合給対象変更契約
        sortKey.append(WrkAjb1mp01Dto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 歩合給変動．処理年月
        sortKey.append(WrkAjb1mp01Dto.COLUMN_SH_YM);
        sortKey.append(" ASC ");

        wrkAjb1mp01Example.setOrderByClause(sortKey.toString());

        List<WrkAjb1mp01Dto> wrkAjb1mpDto01 = this.wrkAjb1mp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAjb1mp01Example);
        if (wrkAjb1mpDto01.isEmpty()) {
            return new ArrayList<Ajb1mpDto>();
        }

        List<Ajb1mpDto> ajb1mpDtoList = new ArrayList<>();
        for (int i = 0; i < wrkAjb1mpDto01.size(); i++) {
            Ajb1mpDto ajb1mpDto = new Ajb1mpDto();
            this.beanMapper.map(wrkAjb1mpDto01.get(i), ajb1mpDto);
            ajb1mpDtoList.add(ajb1mpDto);
        }
        return ajb1mpDtoList;
    }

    private List<Aje1fpDto> selectAje1fp(T dto, String kyCd, String addCd) {
        Aje1fpExample aje1fpExample = new Aje1fpExample();
        Aje1fpExample.Criteria criteria = aje1fpExample.createCriteria();
        // 【検索条件】
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }
        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード 降順
        sortKey.append(Aje1fpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード 降順
        sortKey.append(Aje1fpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給年月 降順
        sortKey.append(Aje1fpDto.COLUMN_SKY_YM);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期 降順
        sortKey.append(Aje1fpDto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番 降順
        sortKey.append(Aje1fpDto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(Aje1fpDto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象変更契約
        sortKey.append(Aje1fpDto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 歩合給対象者コード
        sortKey.append(Aje1fpDto.COLUMN_BUK_TSM_CD);
        sortKey.append(" ASC ");
        aje1fpExample.setOrderByClause(sortKey.toString());

        return this.aje1fpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), aje1fpExample);
    }

    private List<Aje1fpDto> selectWrkAje1fp01(T dto, String wrkKey, String kyCd, String addCd) {
        WrkAje1fp01Example wrkAje1fp01Example = new WrkAje1fp01Example();
        WrkAje1fp01Example.Criteria criteria = wrkAje1fp01Example.createCriteria();
        // 【検索条件】
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード 降順
        sortKey.append(WrkAje1fp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード 降順
        sortKey.append(WrkAje1fp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給年月 降順
        sortKey.append(WrkAje1fp01Dto.COLUMN_SKY_YM);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期 降順
        sortKey.append(WrkAje1fp01Dto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番 降順
        sortKey.append(WrkAje1fp01Dto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(WrkAje1fp01Dto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象変更契約
        sortKey.append(WrkAje1fp01Dto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 歩合給対象者コード
        sortKey.append(WrkAje1fp01Dto.COLUMN_BUK_TSM_CD);
        sortKey.append(" ASC ");
        wrkAje1fp01Example.setOrderByClause(sortKey.toString());

        List<WrkAje1fp01Dto> wrkAje1fp01List = this.wrkAje1fp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAje1fp01Example);

        if (wrkAje1fp01List.isEmpty()) {
            return new ArrayList<Aje1fpDto>();
        }

        List<Aje1fpDto> aje1fpDtoList = new ArrayList<Aje1fpDto>();
        for (int i = 0; i < wrkAje1fp01List.size(); i++) {
            Aje1fpDto aje1fpDto = new Aje1fpDto();
            this.beanMapper.map(wrkAje1fp01List.get(i), aje1fpDto);
            aje1fpDtoList.add(aje1fpDto);
        }
        return aje1fpDtoList;
    }

    private List<Ajm1fpDto> selectAjm1fp(T dto, String kyCd, String addCd) {
        Ajm1fpExample ajm1fpExample = new Ajm1fpExample();
        Ajm1fpExample.Criteria criteria = ajm1fpExample.createCriteria();
        // 【検索条件】
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }
        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(Ajm1fpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(Ajm1fpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(Ajm1fpDto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象契約履歴
        sortKey.append(Ajm1fpDto.COLUMN_BUK_TS_KY_RRK);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期
        sortKey.append(Ajm1fpDto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番
        sortKey.append(Ajm1fpDto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 対象者コード
        sortKey.append(Ajm1fpDto.COLUMN_TSM_CD);
        sortKey.append(" ASC, ");
        // 年月度
        sortKey.append(Ajm1fpDto.COLUMN_YMD);
        sortKey.append(" ASC, ");
        // 特例項目コード
        sortKey.append(Ajm1fpDto.COLUMN_SPR_KM_CD);
        sortKey.append(" ASC ");
        ajm1fpExample.setOrderByClause(sortKey.toString());

        return this.ajm1fpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), ajm1fpExample);
    }

    private List<Ajm1fpDto> selectWrkAjm1fp01(T dto, String wrkKey, String kyCd, String addCd) {
        WrkAjm1fp01Example wrkAjm1fp01Example = new WrkAjm1fp01Example();
        WrkAjm1fp01Example.Criteria criteria = wrkAjm1fp01Example.createCriteria();
        // 【検索条件】
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(WrkAjm1fp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(WrkAjm1fp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(WrkAjm1fp01Dto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象契約履歴
        sortKey.append(WrkAjm1fp01Dto.COLUMN_BUK_TS_KY_RRK);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期
        sortKey.append(WrkAjm1fp01Dto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番
        sortKey.append(WrkAjm1fp01Dto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 対象者コード
        sortKey.append(WrkAjm1fp01Dto.COLUMN_TSM_CD);
        sortKey.append(" ASC, ");
        // 年月度
        sortKey.append(WrkAjm1fp01Dto.COLUMN_YMD);
        sortKey.append(" ASC, ");
        // 特例項目コード
        sortKey.append(WrkAjm1fp01Dto.COLUMN_SPR_KM_CD);
        sortKey.append(" ASC ");
        wrkAjm1fp01Example.setOrderByClause(sortKey.toString());

        List<WrkAjm1fp01Dto> wrkAjm1fp01List = this.wrkAjm1fp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAjm1fp01Example);

        if (wrkAjm1fp01List.isEmpty()) {
            return new ArrayList<Ajm1fpDto>();
        }

        List<Ajm1fpDto> ajm1fpDtoList = new ArrayList<Ajm1fpDto>();
        for (int i = 0; i < wrkAjm1fp01List.size(); i++) {
            Ajm1fpDto ajm1fpDto = new Ajm1fpDto();
            this.beanMapper.map(wrkAjm1fp01List.get(i), ajm1fpDto);
            ajm1fpDtoList.add(ajm1fpDto);
        }
        return ajm1fpDtoList;
    }

    private List<Ajl1fpDto> selectAjl1fp(T dto, String kyCd, String addCd) {
        Ajl1fpExample ajl1fpExample = new Ajl1fpExample();
        Ajl1fpExample.Criteria criteria = ajl1fpExample.createCriteria();
        // 【検索条件】
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }
        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(Ajl1fpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(Ajl1fpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 年月度
        sortKey.append(Ajl1fpDto.COLUMN_YMD);
        sortKey.append(" ASC, ");
        // 特例項目コード
        sortKey.append(Ajl1fpDto.COLUMN_SPR_KM_CD);
        sortKey.append(" ASC ");
        ajl1fpExample.setOrderByClause(sortKey.toString());

        return this.ajl1fpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), ajl1fpExample);
    }

    private List<Ajl1fpDto> selectWrkAjl1fp01(T dto, String wrkKey, String kyCd, String addCd) {
        WrkAjl1fp01Example wrkAjl1fp01Example = new WrkAjl1fp01Example();
        WrkAjl1fp01Example.Criteria criteria = wrkAjl1fp01Example.createCriteria();
        // 【検索条件】
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(WrkAjl1fp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(WrkAjl1fp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 年月度
        sortKey.append(WrkAjl1fp01Dto.COLUMN_YMD);
        sortKey.append(" ASC, ");
        // 特例項目コード
        sortKey.append(WrkAjl1fp01Dto.COLUMN_SPR_KM_CD);
        sortKey.append(" ASC ");
        wrkAjl1fp01Example.setOrderByClause(sortKey.toString());

        List<WrkAjl1fp01Dto> wrkAjl1fp01List = this.wrkAjl1fp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAjl1fp01Example);

        if (wrkAjl1fp01List.isEmpty()) {
            return new ArrayList<Ajl1fpDto>();
        }

        List<Ajl1fpDto> ajl1fpDtoList = new ArrayList<Ajl1fpDto>();
        for (int i = 0; i < wrkAjl1fp01List.size(); i++) {
            Ajl1fpDto ajl1fpDto = new Ajl1fpDto();
            this.beanMapper.map(wrkAjl1fp01List.get(i), ajl1fpDto);
            ajl1fpDtoList.add(ajl1fpDto);
        }
        return ajl1fpDtoList;
    }

    private List<Ajd1mpDto> selectAjd1mp(T dto, String kyCd, String addCd) {
        Ajd1mpExample ajd1mpExample = new Ajd1mpExample();
        Ajd1mpExample.Criteria criteria = ajd1mpExample.createCriteria();
        // 【検索条件】
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }
        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(Ajd1mpDto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(Ajd1mpDto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(Ajd1mpDto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象変更契約
        sortKey.append(Ajd1mpDto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期
        sortKey.append(Ajd1mpDto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番
        sortKey.append(Ajd1mpDto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 歩合給対象者コード
        sortKey.append(Ajd1mpDto.COLUMN_BUK_TSM_CD);
        sortKey.append(" ASC, ");
        // 支給年月
        sortKey.append(Ajd1mpDto.COLUMN_SKY_YM);
        sortKey.append(" ASC, ");
        // 支給明細連番
        sortKey.append(Ajd1mpDto.COLUMN_SKY_MSI_RNO);
        sortKey.append(" ASC ");
        ajd1mpExample.setOrderByClause(sortKey.toString());

        return this.ajd1mpSharedService.selectByExampleUnlimited(dto.createDbOperationDto(), ajd1mpExample);
    }

    private List<Ajd1mpDto> selectWrkAjd1mp01(T dto, String wrkKey, String kyCd, String addCd) {
        WrkAjd1mp01Example wrkAjd1mp01Example = new WrkAjd1mp01Example();
        WrkAjd1mp01Example.Criteria criteria = wrkAjd1mp01Example.createCriteria();
        // 【検索条件】
        // ワークテーブル特定キー
        criteria.andWkTblSptKeyEqualTo(StringUtil.getEmptyIfNull(wrkKey));
        criteria.andKyCdEqualTo(StringUtil.padZero(kyCd, 7));
        if (StringUtils.isNotBlank(addCd)) {
            criteria.andAddCdEqualTo(StringUtil.padZero(addCd, 3));
        }

        // 【ソート順】
        StringBuilder sortKey = new StringBuilder();
        // 支払マスタ．契約コード
        sortKey.append(WrkAjd1mp01Dto.COLUMN_KY_CD);
        sortKey.append(" ASC, ");
        // 支払マスタ．追加コード
        sortKey.append(WrkAjd1mp01Dto.COLUMN_ADD_CD);
        sortKey.append(" ASC, ");
        // 歩合給種別
        sortKey.append(WrkAjd1mp01Dto.COLUMN_BUK_SB);
        sortKey.append(" ASC, ");
        // 歩合給対象変更契約
        sortKey.append(WrkAjd1mp01Dto.COLUMN_BUK_TS_CHKY);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期
        sortKey.append(WrkAjd1mp01Dto.COLUMN_SKY_JKI);
        sortKey.append(" ASC, ");
        // 支払マスタ．支給時期枝番
        sortKey.append(WrkAjd1mp01Dto.COLUMN_SKY_JKI_ENO);
        sortKey.append(" ASC, ");
        // 歩合給対象者コード
        sortKey.append(WrkAjd1mp01Dto.COLUMN_BUK_TSM_CD);
        sortKey.append(" ASC, ");
        // 支給年月
        sortKey.append(WrkAjd1mp01Dto.COLUMN_SKY_YM);
        sortKey.append(" ASC, ");
        // 支給明細連番
        sortKey.append(WrkAjd1mp01Dto.COLUMN_SKY_MSI_RNO);
        sortKey.append(" ASC ");
        wrkAjd1mp01Example.setOrderByClause(sortKey.toString());

        List<WrkAjd1mp01Dto> wrkAjd1mp01List = this.wrkAjd1mp01SharedService.selectByExampleUnlimited(dto.createDbOperationDto(), wrkAjd1mp01Example);

        if (wrkAjd1mp01List.isEmpty()) {
            return new ArrayList<Ajd1mpDto>();
        }

        List<Ajd1mpDto> ajd1mpDtoList = new ArrayList<Ajd1mpDto>();
        for (int i = 0; i < wrkAjd1mp01List.size(); i++) {
            Ajd1mpDto ajd1mpDto = new Ajd1mpDto();
            this.beanMapper.map(wrkAjd1mp01List.get(i), ajd1mpDto);
            ajd1mpDtoList.add(ajd1mpDto);
        }
        return ajd1mpDtoList;
    }

    public void setAja1mpService(Aja1mpSharedService aja1mpSharedService, WrkAja1mp01SharedService wrkAja1mp01SharedService) {
        this.aja1mpSharedService = aja1mpSharedService;
        this.wrkAja1mp01SharedService = wrkAja1mp01SharedService;
    }

    public void setAja2mpService(Aja2mpSharedService aja2mpSharedService, WrkAja2mp01SharedService wrkAja2mp01SharedService) {
        this.aja2mpSharedService = aja2mpSharedService;
        this.wrkAja2mp01SharedService = wrkAja2mp01SharedService;
    }

    public void setAjb1mpService(Ajb1mpSharedService ajb1mpSharedService, WrkAjb1mp01SharedService wrkAjb1mp01SharedService) {
        this.ajb1mpSharedService = ajb1mpSharedService;
        this.wrkAjb1mp01SharedService = wrkAjb1mp01SharedService;
    }

    public void setAje1fpService(Aje1fpSharedService aje1fpSharedService, WrkAje1fp01SharedService wrkAje1fp01SharedService) {
        this.aje1fpSharedService = aje1fpSharedService;
        this.wrkAje1fp01SharedService = wrkAje1fp01SharedService;
    }

    public void setAjm1fpService(Ajm1fpSharedService ajm1fpSharedService, WrkAjm1fp01SharedService wrkAjm1fp01SharedService) {
        this.ajm1fpSharedService = ajm1fpSharedService;
        this.wrkAjm1fp01SharedService = wrkAjm1fp01SharedService;
    }

    public void setAjl1fpService(Ajl1fpSharedService ajl1fpSharedService, WrkAjl1fp01SharedService wrkAjl1fp01SharedService) {
        this.ajl1fpSharedService = ajl1fpSharedService;
        this.wrkAjl1fp01SharedService = wrkAjl1fp01SharedService;
    }

    public void setAjd1mpService(Ajd1mpSharedService ajd1mpSharedService, WrkAjd1mp01SharedService wrkAjd1mp01SharedService) {
        this.ajd1mpSharedService = ajd1mpSharedService;
        this.wrkAjd1mp01SharedService = wrkAjd1mp01SharedService;
    }

    private File createFile(String filePath) {
        File newF = new File(filePath);
        if (!newF.exists()) {
            try {
                newF.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return newF;
    }

    private boolean writeText(String filePath, boolean append, String content) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // FileWriter fw = new FileWriter(filePath, append);
            // fw.write(content);
            // fw.close();
            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            bw.write(content);
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean printLog(String content) {
        return this.printLog(null, content);
    }

    public boolean printLog(String name, String content) {
        boolean suc = false;
        String textName =this.logPath + StringUtil.getEmptyIfNull(name) + ".txt";
        this.createFile(textName);
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter(textName, true));
            bw.write(content + "\r\n");
            bw.flush();
            bw.close();
            suc = true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return suc;
    }

    private String getRow(String content, String start, String end, String start2, String end2) {
        StringBuffer row = new StringBuffer();
        StringBuffer buffer = new StringBuffer();
        buffer.append(content);
        int begin = 0;
        int first = 0;
        int last = 0;

        for (int i = 0; i < 3; i++) {
            buffer.delete(0, buffer.indexOf("(") + 1);
        }

        if (StringUtils.isNotEmpty(start2)) {
            // row.append("'");

            row.append(buffer.substring(0, buffer.indexOf(end)));
            row.append(",");
            buffer.delete(0, buffer.indexOf(end) + 1);
        }

        while (buffer.indexOf(start) != -1 && buffer.indexOf(end) != -1) {
            first = buffer.indexOf(start);
            last = buffer.indexOf(end);
            if (first < last) {
                // row.append("'");
                row.append(buffer.substring(first + 1, last));
                row.append(",");
                buffer.delete(0, last + 1);

                if (StringUtils.isNotEmpty(start2)) {
                    buffer.delete(0, buffer.indexOf(",") + 1);
                }
            } else {
                System.err.println("CSV ERROR");
                break;
            }
        }

        if (StringUtils.isNotEmpty(end2)) {
            row.append(buffer.substring(buffer.indexOf(start) + 1, buffer.indexOf(end2)));
        }

        return row.toString();
    }

    public boolean writeAjd1mp(String filePath, boolean append, List<Ajd1mpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Ajd1mpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAjl1fp(String filePath, boolean append, List<Ajl1fpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Ajl1fpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAjm1fp(String filePath, boolean append, List<Ajm1fpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Ajm1fpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAje1fp(String filePath, boolean append, List<Aje1fpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Aje1fpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAjb1mp(String filePath, boolean append, List<Ajb1mpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Ajb1mpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAja1mp(String filePath, boolean append, List<Aja1mpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Aja1mpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    public boolean writeAja2mp(String filePath, boolean append, List<Aja2mpDto> contents) {
        boolean flag = false;
        File targetF = this.createFile(filePath);
        try {
            // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
            List<String> contentList = new ArrayList<>();
            contentList.add(this.getTime());
            contentList.add(this.getStackLog());
            if (contents == null || contents.isEmpty()) {
                return false;
            }
            String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
            contentList.add(header);

            for (Aja2mpDto dto : contents) {
                String content = this.getRow(dto.toString(), "=", ",", null, ")");
                contentList.add(content);
            }

            BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
            StringBuffer bf = new StringBuffer();
            for (String content : contentList) {
                bf.append(content.toString() + "\r\n");
            }
            bw.write(bf.toString());
            bw.flush();
            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        flag = true;
        return flag;
    }

    private String getTime() {
        LocalDate today = LocalDate.now();
        LocalTime localTime = LocalTime.now();
        String time = "\r\n" + "  +++++day:" + today.getMonthValue() + "-" + today.getDayOfMonth()
                + " // time:" + localTime + "  +++++";
        return time;
    }

    private String getName(String id) {
        return this.getName(id, null);
    }

    private String getName(String id, String claz) {
        LocalDate today = LocalDate.now();
        LocalTime localTime = LocalTime.now().withNano(0);
        String name = "";
        if (StringUtils.isBlank(claz)) {
            name = this.filePath + id + ".csv";
        } else {
            name = this.filePath + id + "_" + StringUtil.getEmptyIfNull(claz) + "_" + today.getMonthValue() + "-" + today.getDayOfMonth() + "_"
                    + localTime.getHour() + localTime.getMinute() + localTime.getSecond() + ".csv";
//            name.replaceAll("/", "-");
//            name.replaceAll(":", "");
        }
        return name;
    }

    public String getStackLog() {
        // StackTraceElement stack[] = Thread.currentThread().getStackTrace(); // 获取线程运行栈信息
        StackTraceElement stack[] = (new Throwable()).getStackTrace(); // 获取线程运行栈信息
        // for(int i=0;i<stack.length;i++) {
        StackTraceElement s = stack[6];
        return "\r\n" + "+++++ClassName:%s" + s.getClassName() + "+++MethodName:%s" + s.getMethodName()
                + "+++FileName:%s" + s.getFileName()
                + "+++LineNumber:%s" + s.getLineNumber() + "+++++";
    }
    // public List<String> list2CSVD(List<D> contents, String start, String end, String start2, String end2) {
    // List<String> csvList = new ArrayList<>();
    // LocalDate today = LocalDate.now();
    // LocalTime localTime = LocalTime.now();
    // csvList.add("\r\n" + " +++++day:" + today.getMonthValue() + today.getDayOfMonth()
    // + " // time:" + localTime + " +++++" + "\r\n");
    // String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
    // csvList.add(header);
    //
    // for (D dto : contents) {
    // String content = this.getRow(dto.toString(), "=", ",", null, ")");
    // csvList.add(content);
    // }
    //
    // return csvList;
    // }
    //
    // public boolean writeCSVD(String filePath, boolean append, List<D> contents, String start, String end, String start2, String end2) {
    // boolean flag = false;
    // File targetF = this.createFile(filePath);
    // try {
    // // List<String> contentList = this.list2CSVD(contents, start, end, start2, end2);
    // List<String> contentList = new ArrayList<>();
    // String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
    // contentList.add(header);
    //
    // for (D dto : contents) {
    // String content = this.getRow(dto.toString(), "=", ",", null, ")");
    // contentList.add(content);
    // }
    //
    // BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
    // StringBuffer bf = new StringBuffer();
    // for (String content : contentList) {
    // bf.append(content.toString() + "\r\n");
    // }
    // bw.write(bf.toString());
    // bw.flush();
    // bw.close();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // flag = true;
    // return flag;
    // }

    // public List<String> list2CSV(List<T> contents) {
    // List<String> csvList = new ArrayList<>();
    // String header = this.getRow(contents.get(0).toString(), " ", "=", "(", null);
    // csvList.add(header);
    //
    // for (T dto : contents) {
    // String content = this.getRow(dto.toString(), "=", ",", null, ")");
    // csvList.add(content);
    // }
    //
    // return csvList;
    // }

    // public boolean writeCSV(String filePath, boolean append, List<T> contents) {
    // boolean flag = false;
    // File targetF = this.createFile(filePath);
    // try {
    // List<String> contentList = this.list2CSV(contents);
    //
    // BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, append));
    // StringBuffer bf = new StringBuffer();
    // for (String content : contentList) {
    // bf.append(content.toString() + "\r\n");
    // }
    // bw.write(bf.toString());
    // bw.flush();
    // bw.close();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // flag = true;
    // return flag;
    // }

    // public List<String> str2List(String content, String start, String end, String start2, String end2) {
    // List<String> elements = new ArrayList<>();
    // String buffer = content;
    // // Log.e("截取前++-- ", content);
    // int first = 0;
    // int last = 0;
    // if (StringUtils.isNotEmpty(start2)) {
    // String target = buffer.substring(buffer.indexOf(start2), buffer.indexOf(end) + 1);
    // elements.add(target);
    // }
    //
    // if (buffer.indexOf(start) != -1 && buffer.indexOf(end) != -1) {
    // first = buffer.indexOf(start);
    // last = buffer.indexOf(end) + 1;
    // if (first < last) {
    // String target = buffer.substring(first, last);
    // elements.add(target);
    // // String replace = content.replace(target, "");
    // String replace = buffer.substring(last);
    // buffer = replace;
    // }
    // }
    //
    // if (StringUtils.isNotEmpty(end2)) {
    // String target = buffer.substring(buffer.indexOf(start), buffer.indexOf(end2) + 1);
    // elements.add(target);
    // }
    // return elements;
    // }
}
